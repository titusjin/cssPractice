/*
    first universal reset for the environment :
    * selector : select all elements on page.
 */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/*
    everyting need to be inheriented would be defined here.
 */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    /*
        padding will not be inheriented so only body will have this css setting
     */
    padding: 30px;
}

.header {
    /* vh would make the header always occupy as 95% of the container , regardless how we change the size of it */
    height: 95vh;
    position: relative;
    /*
        when using gradient : always background-image
        so below shows there are two images there : one is gradient color / the other is the hero image below the gradient.
    */
    background-image:
<<<<<<< HEAD:css/style.css
    /*
    rgba 的a 就是 opacity
    */
    linear-gradient(to right bottom, rgba(126, 253, 111, 0.8), rgba(40, 180, 131, 0.8)),
=======
    /* rgba 的a 就是 opacity / 這邊用上兩張圖 */
    linear-gradient(to right bottom, rgba(#7ed56f, 0.8), rgba(#28b485, 0.8)),
>>>>>>> 9876e5ade879c71036d100966612e05611dbd905:styles.css
    url(../img/hero.jpg);
    /* cover means */
    background-size: cover;
    background-position: top;
    /*
        clip-path is very modern css features but edege/IE/Safari not support
        Can use SVG --> clipPath --> polygon 替代
        Note: the points number can be random like if try to make one triangle , only need three points(點的排列使用：左上角開始，順時鐘)
     */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box{
    /* absolute position is relative to parent element which has positon as relative */
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo{
    /* set the height and width wold be automatically figured out by browser */
    height: 35px;
}

.logo:hover {
    animation: moveInRight 1s ease-out;
}

.text-box {
    position: absolute;
    top: 50%;
    left: 50%;
    /* using positon: absolute will make the left-top corner in the middle of the page but not the element so we have to use "transform translate" to make the adjacent not compare to the parent element but to in related to the element its self */
    transform: translate( -40%, -50% );
    text-align: center;
}

.heading-primary{
    color: #fff;
    text-transform: uppercase;

    /**
     * when using the animation the whle element might show some shicky to top
     * as the teacher said: 'no one really know why but we know how to fix it'
     */
    backface-visibility: hidden;

    margin-bottom: 60px;
}

.heading-primary-main{
    /* make inline element behaviors like block element: will occupy the 100% width*/
    display: block;
    font-size: 60px;
    font-weight: 400; /* control the font thickness */
    letter-spacing: 35px;
    /**
     * to apply the animation by using
     * 1. Animation name we defined in css
     * 2. Animation duration  : the time animation should take
     */
    animation-name: mofeInLeft;
    animation-duration: 3s;
    animation-timing-function: ease-out;
    /* before the animation start, it will wait for 1 second
    animation-delay: 1s;
    */
}

.heading-primary-sub{
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out;
}

/*
    Animations ***
    in css there are basically two different types of animations
    1. transition
    2. keyframe
 */
@@keyframes moveInLeft {
    /* initial state */
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }

    /* mddle state */
    36% {
        /* so the animation will move a little bit to the right then back */
        transform: translateX(10px);
    }

    /* end state */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@@keyframes moveInRight {
    /* initial state */
    0% {
        opacity: 0;
        transform: translateX(100px);
    }

    /* mddle state */
    36% {
        /* so the animation will move a little bit to the right then back */
        transform: translateX(-10px);
    }

    /* end state */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}


/**
 * to make the btn centered
 * cause it is just one inline-element , for that we can just using text-align * in the parent element which for this condition is: .text-box
 */
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* first: top/bottom   second: right/left */
    padding: 15px 40px;
    display: inline-block;
}

.btn-white {
    background-color: #fff;
    color: #777;
}
